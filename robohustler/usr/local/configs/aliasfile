#!/bin/bash

###ssh-add
#sets agent invironment
env=~/.ssh/agent.env

###checks if agent is active
agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

###tries to start agent
agent_start () {
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ; }

agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add ~/.ssh/id_ed25519
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add ~/.ssh/id_ed25519
fi
 
unset env

source /opt/ros/noetic/setup.bash

export current_user=$(whoami)

export SF_USR="$current_user"

export ZT_IP=<zerotier.ip>

trav() {
    swarmfarm-route-analyser -c
}

alias checknet="ping 8.8.8.8"

alias rconnect='sfssh'

alias getdata='sf-grab'

alias sfalogin='swarmfarm-auth-login'

alias plot='plot_can'

alias logs='cd /home/$SF_USR/logs'

checkon(){
sfany ping $@ -i
}

getnum(){
getrobotname $1
}

forward(){
    ssh -D 1081 $SF_USR@v-$(getrobotname $1).swarmfarm.com
}

percep(){
ros-access-client -f $ZT_IP $(getrobotname $1) 
rviz
}

heading(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotLocalisation/gps/fix/heading_track_over_ground /SwarmbotLocalisation/gps/fix/dual_antenna_heading /SwarmbotLocalisation/gps/fix/heading/data
}

a-press(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotAttachments/sprayer_v1/spray_pressure /SwarmbotAttachments/sprayer_v1/spray_pressure_reference
}

wheels(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotPlcController/hardware_responses/wheel_linear_vel_front_left /SwarmbotPlcController/hardware_responses/wheel_linear_vel_front_right /SwarmbotPlcController/hardware_responses/wheel_linear_vel_rear_left /SwarmbotPlcController/hardware_responses/wheel_linear_vel_rear_right
}

d-press(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotPlcController/hardware_responses/front_mobility_pump_pressure /SwarmbotPlcController/hardware_responses/rear_mobility_pump_pressure
}

steer(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotPlcController/hardware_responses/articulation_angle /SwarmbotPlcController/steering_command /SwarmbotPlatformController/distance_to_path/current/front /SwarmbotPlatformController/distance_to_path/current/rear /SwarmbotPlatformController/distance_to_path/current
}

drive(){
    ros-access-client -f $ZT_IP $(getrobotname $1)
    rqt_plot /SwarmbotPlcController/drive_velocity_command /SwarmbotPlcController/hardware_responses/wheel_linear_vel_average /SwarmbotLocalisation/gps/fix/velocities/ground
}

logdir() {
    # Function to pad an argument with leading zeros to make it 4 characters in length
    pad_to_4_digits() {
        local arg="$1"
        printf "%04d" "$arg"
    }

    # Function to convert all characters to uppercase if "can" is passed in
    convert_to_uppercase() {
        local arg="$1"
        if [ "$arg" = "can" ]; then
            arg=$(echo "$arg" | tr '[:lower:]' '[:upper:]')
        fi
        echo "$arg"
    }

    # Function to display the help menu
    show_help() {
        echo "Usage: logdir <robotno> <ticketno> <datadir>"
        echo "logdir 20 4094"
        echo "will get you"
        echo " robot:sb20 ticket:4094 data:CAN"
    }

    # Check for the help option
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        show_help
        return 0
    fi

    # Check for the correct number of arguments
    if [ "$#" -ne 3 ]; then
        echo "Error: Missing arguments."
        show_help
        return 1
    fi

    local log_dir="$HOME/logs/sb-$(pad_to_4_digits "$1")/$2/$(convert_to_uppercase "$3")"

    # Check if the directory exists
    if [ -d "$log_dir" ]; then
        cd "$log_dir" || return 1
        log_dir=$(realpath "$log_dir")
        echo "Changed to: $log_dir"
    else
        echo "Error: Directory does not exist."
        return 1
    fi
}

reload(){

read -r -p "Press Enter to continue or Ctrl+C to cancel...you will lose your current terminal if you continue" userInput

if [ -z "$userInput" ]; then
  echo "Continuing..."
else
  echo "Operation canceled."
  exit 1
fi

countdown=5

while [ "$countdown" -gt 0 ]; do
  echo -n "$countdown... "
  sleep 1
  countdown=$((countdown - 1))
done

if [ -z "$userInput" ]; then
  echo "Continuing..."
      sudo apt update
  
    cd /tmp/

    if [ -d "/tmp/robohustler/" ]; then
        sudo rm -r "/tmp/robohustler/"
    fi

    if [ -d "/tmp/bootstrapper/" ]; then
        sudo rm -r "/tmp/bootstrapper/"
    fi

    cd /tmp/ && git clone git@github.com:tlswarm/robohustler.git && sudo dpkg -i /tmp/robohustler/robohustler.deb && cd && source ~/.bash_aliases 

    if [ -d "/tmp/robohustler/" ]; then
        sudo rm -r "/tmp/robohustler/"
    fi

    else

    echo "Operation canceled."

fi

}

### Utilities
get_focal_zone() {

	path="/var/lib/swarmfarm/swarmbot/swarmbotCommon/PaddockDefinitions/"

	for farm in "$path*"; do
        for paddock in $farm/*; do
			for file in $paddock/*.txt; do

				if [[ "$file" != *"definition.txt"* ]] && [[ "$file" != *"*.txt"* ]]; then

					echo -n "From the file: $file, the utm zone is "

					IFS='	' read -ra llarray <<< $(head -n 1 "$file")
					export my_utm_zone="$(~/SystemUtilities/swarmfarm-lawries-scripts/src/python/swarmfarm_latlong_to_utm ${llarray[0]} ${llarray[1]} -u)"
					echo "$my_utm_zone"
					return
				fi
			done
        done
    done
}


get_dir() {

    case "$1" in

        canlog | can | can_log)
            echo "/var/log/swarmfarm/swarmbot/can_logs/"
            ;;
        cmn | common)
            echo "/var/lib/swarmfarm/swarmbot/swarmbotCommon"
            ;;
        config)
            echo "/etc/swarmfarm/swarmbot/"
            ;;
        home)
            echo "/home/$username/"
            ;;
        bag)
            echo "/var/log/swarmfarm/swarmbot/bagfiles/"
            ;;
        attach | attachment | acfg | aconfig)
            echo "/etc/swarmfarm/can-utils/"
            ;;
        workedareas | wa)
            echo "/var/log/swarmfarm/swarmbot/workedAreas/"
            ;;
        paths | p)
            echo "/var/lib/swarmfarm/swarmbot/planner/"
            ;;
        *)
            echo "$1"
            ;;

    esac
}
sfros()
{
	source /etc/profile.d/swarmfarm-ros-access-client.sh
	#ros-access-client $(getrobotname $1)
	ros-access-client -f $ZT_IP $(getrobotname $1)
}

copy() {

	local args
	local nonargs

	args=$(get_args "$@")
	nonargs=$(clear_args "$@")

	set -- $nonargs

	local path

	echo $2

	path=$(get_dir "$2")

	echo "rsync --progress --compress $(getrobotstring $1 $args):$path$3 $4"
	rsync --progress --compress $(getrobotstring $1 $args):$path$3 $4
}
